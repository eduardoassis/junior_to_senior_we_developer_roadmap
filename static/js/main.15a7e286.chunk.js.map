{"version":3,"sources":["components/search-box/SearchBox.js","components/card/Card.js","components/card-list/CardList.js","components/scroll/Scroll.js","containers/error-boundry/ErrorBoundry.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","onSearchChange","className","name","type","onChange","Card","id","email","alt","src","CardList","robots","cardComponents","map","user","index","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","errors","info","console","log","this","setState","Component","App","event","searchfield","target","value","componentDidMount","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAeeA,EAbG,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eAE7B,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,mCACbC,KAAK,YACLC,KAAK,SACLJ,YAAaA,EACbK,SAAUJ,MCIXK,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIJ,EAAiB,EAAjBA,KAAMK,EAAW,EAAXA,MACrB,OACI,yBAAKN,UAAU,uDACX,yBAAKO,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKJ,GACL,2BAAIK,MCSLG,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OAAQ,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAOT,GACrBA,GAAIK,EAAOI,GAAOT,GAClBJ,KAAMS,EAAOI,GAAOb,KACpBK,MAAOI,EAAOI,GAAOR,WAErC,OACI,oCAAGK,ICDIK,G,MATA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAAEC,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,YCmBJC,E,kDArBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHA,E,8DAODC,EAAQC,GACtBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEN,UAAU,M,+BAI1B,OAAOK,KAAKC,SAASN,SACjB,wDACAK,KAAKb,MAAMK,a,GAlBIU,aC+CZC,E,kDAxCX,aAAe,IAAD,8BACV,gBAOJlC,eAAgB,SAACmC,GACb,EAAKH,SAAS,CAAEI,YAAcD,EAAME,OAAOC,SATjC,EAYdC,kBAAoB,WAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAErB,OAASiC,QAbxC,EAAKnB,MAAQ,CACTd,OAAQ,GACRyB,YAAa,IAJP,E,qDAkBJ,IAAD,EAC2BL,KAAKN,MAA7Bd,EADH,EACGA,OAAQyB,EADX,EACWA,YACVS,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,oBAAoBC,SAASb,EAAYY,wBAE/D,OAAQrC,EAAOuC,OAGP,yBAAKjD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWF,YAAY,gBAAgBC,eAAgB+B,KAAK/B,iBAC5D,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUW,OAAQkC,OAPlC,2C,GA1BMZ,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.15a7e286.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({placeholder, onSearchChange}) => {\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'                \r\n                name='searchbox'\r\n                type='search'\r\n                placeholder={placeholder}\r\n                onChange={onSearchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './../card/Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponents = robots.map((user, index) =>{\r\n        return (<Card key={robots[index].id} \r\n                    id={robots[index].id} \r\n                    name={robots[index].name}\r\n                    email={robots[index].email}/>);\r\n    });\r\n    return (\r\n        <>{cardComponents}</>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{ overflowY:  'scroll', border: '5px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(errors, info) {\r\n        console.log(errors);\r\n        console.log(info);\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        return this.setState.hasError ?\r\n            <h1>Oooops. That is not good</h1> :\r\n            this.props.children;\r\n    };\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport SearchBox from '../../components/search-box/SearchBox';\r\nimport CardList from '../../components/card-list/CardList';\r\nimport './App.css';\r\nimport Scroll from '../../components/scroll/Scroll';\r\nimport ErrorBoundry from '../error-boundry/ErrorBoundry'\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange= (event) => {\r\n        this.setState({ searchfield : event.target.value});\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots : users }));\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n        });\r\n        return !robots.length ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox placeholder='Seacrh robots' onSearchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    };\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons'\r\nimport App from './containers/app/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}