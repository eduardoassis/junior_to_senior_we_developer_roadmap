{"version":3,"sources":["components/search-box/SearchBox.js","components/card/Card.js","components/card-list/CardList.js","components/scroll/Scroll.js","containers/error-boundry/ErrorBoundry.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","onSearchChange","className","name","type","onChange","Card","id","email","alt","src","CardList","robots","cardComponents","map","user","index","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","errors","info","console","log","this","setState","Component","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qNAeeA,EAbG,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eAE7B,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,mCACbC,KAAK,YACLC,KAAK,SACLJ,YAAaA,EACbK,SAAUJ,MCIXK,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIJ,EAAiB,EAAjBA,KAAMK,EAAW,EAAXA,MACrB,OACI,yBAAKN,UAAU,uDACX,yBAAKO,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKJ,GACL,2BAAIK,MCSLG,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OAAQ,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAOT,GACrBA,GAAIK,EAAOI,GAAOT,GAClBJ,KAAMS,EAAOI,GAAOb,KACpBK,MAAOI,EAAOI,GAAOR,WAErC,OACI,oCAAGK,ICDIK,G,MATA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAAEC,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,Y,4BCmBJC,E,kDArBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHA,E,8DAODC,EAAQC,GACtBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEN,UAAU,M,+BAI1B,OAAOK,KAAKC,SAASN,SACjB,wDACAK,KAAKb,MAAMK,a,GAlBIU,aCyCZC,MApCf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAEJxB,EAFI,KAEIyB,EAFJ,OAG2BD,mBAAS,IAHpC,mBAGJE,EAHI,KAGSC,EAHT,KAYXC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIR,EAAUQ,QAC1B,IAEH,IAAMC,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,oBAAoBC,SAASZ,EAAYW,wBAE/D,OAAQrC,EAAOuC,OAGP,yBAAKjD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWF,YAAY,gBAAgBC,eArB7B,SAACmD,GACnBb,EAAea,EAAMC,OAAOC,UAqBpB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1C,OAAQkC,OAPjC,yBAAK5C,UAAU,MAAK,yCCjBTqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.b6af307b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({placeholder, onSearchChange}) => {\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'                \r\n                name='searchbox'\r\n                type='search'\r\n                placeholder={placeholder}\r\n                onChange={onSearchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './../card/Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponents = robots.map((user, index) =>{\r\n        return (<Card key={robots[index].id} \r\n                    id={robots[index].id} \r\n                    name={robots[index].name}\r\n                    email={robots[index].email}/>);\r\n    });\r\n    return (\r\n        <>{cardComponents}</>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{ overflowY:  'scroll', border: '5px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(errors, info) {\r\n        console.log(errors);\r\n        console.log(info);\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        return this.setState.hasError ?\r\n            <h1>Oooops. That is not good</h1> :\r\n            this.props.children;\r\n    };\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { useState, useEffect } from 'react';\r\nimport SearchBox from '../../components/search-box/SearchBox';\r\nimport CardList from '../../components/card-list/CardList';\r\nimport './App.css';\r\nimport Scroll from '../../components/scroll/Scroll';\r\nimport ErrorBoundry from '../error-boundry/ErrorBoundry'\r\n\r\nfunction App() {\r\n\r\n    const [robots, setRobots] = useState([])\r\n    const [searchfield, setSearchfield] = useState('')\r\n\r\n    const onSearchChange= (event) => {\r\n        setSearchfield(event.target.value);        \r\n    }\r\n\r\n/*    componentDidMount = () => {\r\n    }\r\n*/\r\n    useEffect(() =>{\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => setRobots(users));\r\n    }, [])\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n    })\r\n    return !robots.length ?\r\n        (<div className='tc'><h1>Loading</h1></div>) :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox placeholder='Seacrh robots' onSearchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons'\r\nimport App from './containers/app/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}